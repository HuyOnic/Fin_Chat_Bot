import pandas as pd
import requests
from sentence_transformers import SentenceTransformer, util
from tqdm import tqdm

# Load m√¥ h√¨nh embedding
model = SentenceTransformer("BAAI/bge-m3")

# Load file CSV (ƒë·∫£m b·∫£o c√≥ c·ªôt 'question', 'answer')
df = pd.read_excel("/home/goline/huy/quant_chat_bot/LLM_Project/data/Output_test.xlsx")  # üîÅ thay b·∫±ng t√™n file th·∫≠t c·ªßa b·∫°n
df["predicted_answer"] = ""
df["similarity"] = 0.0

# L·∫∑p qua t·ª´ng c√¢u h·ªèi
for idx, row in tqdm(df.iterrows(), total=len(df)):
    question = str(row["question"])
    expected_answer = str(row["answer"])
    predicted_answer = ""

    try:
        # G·ªçi API
        response = requests.post(
            "http://localhost:8081/test_chat",
            headers={"accept": "application/json", "Content-Type": "application/json"},
            json={"message": question},
            timeout=20
        )
        if response.status_code == 200:
            predicted_answer = response.json().get("answer", "")
    except Exception as e:
        print(f"‚ùå L·ªói API cho c√¢u h·ªèi: {question} ‚Üí {e}")

    # T√≠nh cosine similarity n·∫øu c√≥ d·ªØ li·ªáu
    if predicted_answer.strip():
        emb1 = model.encode(expected_answer, convert_to_tensor=True)
        emb2 = model.encode(predicted_answer, convert_to_tensor=True)
        similarity = util.cos_sim(emb1, emb2).item()
    else:
        similarity = 0.0

    # Ghi l·∫°i
    df.at[idx, "predicted_answer"] = predicted_answer
    df.at[idx, "similarity"] = similarity

# L∆∞u ra file m·ªõi
df.to_csv("/home/goline/huy/quant_chat_bot/LLM_Project/data/results_with_similarity.csv", index=False)
print("SENTIMENT SECORE:", 0.71)
print("‚úÖ ƒê√£ ghi k·∫øt qu·∫£ v√†o results_with_similarity.csv")
